import jsPDF from "jspdf"
import "jspdf-autotable"
import * as XLSX from "xlsx"
import type { Invoice, Customer, InventoryItem, DashboardStats } from "../types"

declare module "jspdf" {
  interface jsPDF {
    autoTable: (options: any) => jsPDF
  }
}

class ExportService {
  private formatCurrency(amount: number): string {
    return new Intl.NumberFormat("en-IN", {
      style: "currency",
      currency: "INR",
      maximumFractionDigits: 0,
    }).format(amount)
  }

  private formatDate(date: string | Date): string {
    return new Date(date).toLocaleDateString("en-IN")
  }

  // PDF Export Functions
  async exportInvoiceToPDF(invoice: Invoice, organizationName: string): Promise<void> {
    const doc = new jsPDF()

    // Header with DigiPro branding
    doc.setFontSize(24)
    doc.setTextColor(59, 130, 246)
    doc.text("DigiPro", 20, 25)

    doc.setFontSize(16)
    doc.setTextColor(0, 0, 0)
    doc.text("INVOICE", 20, 40)

    // Organization details
    doc.setFontSize(12)
    doc.text(organizationName, 20, 55)
    doc.text(`Invoice #: ${invoice.invoice_number}`, 20, 65)
    doc.text(`Date: ${this.formatDate(invoice.invoice_date)}`, 20, 75)
    doc.text(`Due Date: ${this.formatDate(invoice.due_date)}`, 20, 85)

    // Customer details
    doc.text("Bill To:", 120, 55)
    doc.text(invoice.customer?.name || "", 120, 65)
    doc.text(invoice.customer?.phone || "", 120, 75)
    doc.text(invoice.customer?.address || "", 120, 85)

    // Invoice items table
    const tableData =
      invoice.invoice_items?.map((item, index) => [
        index + 1,
        item.item_name,
        item.quantity,
        this.formatCurrency(item.rate),
        `${item.gst_rate}%`,
        this.formatCurrency(item.total_amount),
      ]) || []

    doc.autoTable({
      head: [["S.No", "Description", "Qty", "Rate", "GST", "Amount"]],
      body: tableData,
      startY: 100,
      theme: "grid",
      headStyles: { fillColor: [59, 130, 246] },
    })

    // Totals
    const finalY = (doc as any).lastAutoTable.finalY + 10
    doc.text(`Subtotal: ${this.formatCurrency(invoice.subtotal)}`, 120, finalY)
    doc.text(`Tax: ${this.formatCurrency(invoice.tax_amount)}`, 120, finalY + 10)
    doc.setFontSize(14)
    doc.text(`Total: ${this.formatCurrency(invoice.total_amount)}`, 120, finalY + 25)

    // Footer
    doc.setFontSize(10)
    doc.setTextColor(128, 128, 128)
    doc.text("Generated by DigiPro - Business Digitization Platform", 20, doc.internal.pageSize.height - 20)

    doc.save(`Invoice_${invoice.invoice_number}.pdf`)
  }

  async exportCustomersToPDF(customers: Customer[], organizationName: string): Promise<void> {
    const doc = new jsPDF()

    // Header
    doc.setFontSize(20)
    doc.setTextColor(59, 130, 246)
    doc.text("DigiPro", 20, 20)

    doc.setFontSize(16)
    doc.setTextColor(0, 0, 0)
    doc.text("Customer List", 20, 35)

    doc.setFontSize(12)
    doc.text(organizationName, 20, 50)
    doc.text(`Generated on: ${this.formatDate(new Date())}`, 20, 60)

    const tableData = customers.map((customer, index) => [
      index + 1,
      customer.name,
      customer.phone,
      customer.email || "-",
      customer.gst_number || "-",
      this.formatCurrency(customer.outstanding_balance),
    ])

    doc.autoTable({
      head: [["S.No", "Name", "Phone", "Email", "GST Number", "Outstanding"]],
      body: tableData,
      startY: 70,
      theme: "grid",
      headStyles: { fillColor: [59, 130, 246] },
    })

    doc.save("Customers_Report.pdf")
  }

  async exportInventoryToPDF(items: InventoryItem[], organizationName: string): Promise<void> {
    const doc = new jsPDF()

    // Header
    doc.setFontSize(20)
    doc.setTextColor(59, 130, 246)
    doc.text("DigiPro", 20, 20)

    doc.setFontSize(16)
    doc.setTextColor(0, 0, 0)
    doc.text("Inventory Report", 20, 35)

    doc.setFontSize(12)
    doc.text(organizationName, 20, 50)
    doc.text(`Generated on: ${this.formatDate(new Date())}`, 20, 60)

    const tableData = items.map((item, index) => [
      index + 1,
      item.name,
      item.category,
      item.current_stock,
      this.formatCurrency(item.selling_price),
      this.formatCurrency(item.current_stock * item.selling_price),
    ])

    doc.autoTable({
      head: [["S.No", "Item Name", "Category", "Stock", "Price", "Value"]],
      body: tableData,
      startY: 70,
      theme: "grid",
      headStyles: { fillColor: [59, 130, 246] },
    })

    doc.save("Inventory_Report.pdf")
  }

  // Excel Export Functions
  async exportCustomersToExcel(customers: Customer[]): Promise<void> {
    const worksheet = XLSX.utils.json_to_sheet(
      customers.map((customer) => ({
        Name: customer.name,
        Phone: customer.phone,
        Email: customer.email || "",
        Address: customer.address || "",
        "GST Number": customer.gst_number || "",
        "Customer Type": customer.customer_type || "",
        "Credit Limit": customer.credit_limit || 0,
        "Outstanding Balance": customer.outstanding_balance || 0,
        "Created Date": this.formatDate(customer.created_at || ""),
      })),
    )

    const workbook = XLSX.utils.book_new()
    XLSX.utils.book_append_sheet(workbook, worksheet, "Customers")

    const timestamp = new Date().toISOString().split("T")[0]
    XLSX.writeFile(workbook, `Customers_${timestamp}.xlsx`)
  }

  async exportInventoryToExcel(items: InventoryItem[]): Promise<void> {
    const worksheet = XLSX.utils.json_to_sheet(
      items.map((item) => ({
        "Item Code": item.item_code,
        "Item Name": item.name,
        Description: item.description || "",
        Category: item.category,
        Brand: item.brand || "",
        Unit: item.unit,
        "HSN Code": item.hsn_code || "",
        "GST Rate": item.gst_rate,
        "Purchase Price": item.purchase_price || 0,
        "Selling Price": item.selling_price,
        "Current Stock": item.current_stock,
        "Min Stock Level": item.min_stock_level,
        "Stock Value": item.current_stock * item.selling_price,
        Supplier: item.supplier_name || "",
        "Created Date": this.formatDate(item.created_at || ""),
      })),
    )

    const workbook = XLSX.utils.book_new()
    XLSX.utils.book_append_sheet(workbook, worksheet, "Inventory")

    const timestamp = new Date().toISOString().split("T")[0]
    XLSX.writeFile(workbook, `Inventory_${timestamp}.xlsx`)
  }

  async exportInvoicesToExcel(invoices: Invoice[]): Promise<void> {
    const worksheet = XLSX.utils.json_to_sheet(
      invoices.map((invoice) => ({
        "Invoice Number": invoice.invoice_number,
        "Customer Name": invoice.customer?.name || "",
        "Invoice Date": this.formatDate(invoice.invoice_date),
        "Due Date": invoice.due_date ? this.formatDate(invoice.due_date) : "",
        Subtotal: invoice.subtotal,
        "Tax Amount": invoice.tax_amount,
        "Total Amount": invoice.total_amount,
        "Paid Amount": invoice.paid_amount,
        "Balance Amount": invoice.balance_amount,
        Status: invoice.status,
        "Payment Status": invoice.payment_status,
        "Created Date": this.formatDate(invoice.created_at || ""),
      })),
    )

    const workbook = XLSX.utils.book_new()
    XLSX.utils.book_append_sheet(workbook, worksheet, "Invoices")

    const timestamp = new Date().toISOString().split("T")[0]
    XLSX.writeFile(workbook, `Invoices_${timestamp}.xlsx`)
  }

  async exportDashboardReport(stats: DashboardStats, organizationName: string): Promise<void> {
    const doc = new jsPDF()

    // Header
    doc.setFontSize(20)
    doc.setTextColor(59, 130, 246)
    doc.text("DigiPro Business Report", 20, 30)

    doc.setFontSize(14)
    doc.setTextColor(0, 0, 0)
    doc.text(organizationName, 20, 45)
    doc.text(`Generated on: ${this.formatDate(new Date())}`, 20, 55)

    // Financial Summary
    doc.setFontSize(16)
    doc.text("Financial Summary", 20, 75)

    const financialData = [
      ["Total Revenue", this.formatCurrency(stats.total_revenue)],
      ["Total Profit", this.formatCurrency(stats.total_profit)],
      ["Monthly Revenue", this.formatCurrency(stats.monthly_revenue)],
      ["Monthly Profit", this.formatCurrency(stats.monthly_profit)],
      ["Total Expenses", this.formatCurrency(stats.total_expenses)],
    ]

    doc.autoTable({
      startY: 85,
      head: [["Metric", "Amount"]],
      body: financialData,
      theme: "grid",
      headStyles: { fillColor: [59, 130, 246] },
    })

    // Business Metrics
    doc.setFontSize(16)
    doc.text("Business Metrics", 20, (doc as any).lastAutoTable.finalY + 20)

    const businessData = [
      ["Total Customers", stats.total_customers.toString()],
      ["New Customers (This Month)", stats.new_customers_this_month.toString()],
      ["Inventory Value", this.formatCurrency(stats.inventory_value)],
      ["Low Stock Items", stats.low_stock_items.toString()],
      ["Out of Stock Items", stats.out_of_stock_items.toString()],
      ["Pending Invoices", stats.pending_invoices.toString()],
      ["Overdue Invoices", stats.overdue_invoices.toString()],
    ]

    doc.autoTable({
      startY: (doc as any).lastAutoTable.finalY + 30,
      head: [["Metric", "Value"]],
      body: businessData,
      theme: "grid",
      headStyles: { fillColor: [59, 130, 246] },
    })

    // Footer
    doc.setFontSize(10)
    doc.setTextColor(128, 128, 128)
    doc.text("Generated by DigiPro - Complete Business Digitization Platform", 20, doc.internal.pageSize.height - 20)

    const timestamp = new Date().toISOString().split("T")[0]
    doc.save(`Business_Report_${timestamp}.pdf`)
  }

  async exportFullBackup(
    data: {
      customers: Customer[]
      inventory: InventoryItem[]
      invoices: Invoice[]
      stats: DashboardStats
    },
    organizationName: string,
  ): Promise<void> {
    const workbook = XLSX.utils.book_new()

    // Customers sheet
    const customersSheet = XLSX.utils.json_to_sheet(data.customers)
    XLSX.utils.book_append_sheet(workbook, customersSheet, "Customers")

    // Inventory sheet
    const inventorySheet = XLSX.utils.json_to_sheet(data.inventory)
    XLSX.utils.book_append_sheet(workbook, inventorySheet, "Inventory")

    // Invoices sheet
    const invoicesSheet = XLSX.utils.json_to_sheet(data.invoices)
    XLSX.utils.book_append_sheet(workbook, invoicesSheet, "Invoices")

    // Summary sheet
    const summarySheet = XLSX.utils.json_to_sheet([data.stats])
    XLSX.utils.book_append_sheet(workbook, summarySheet, "Summary")

    const timestamp = new Date().toISOString().split("T")[0]
    XLSX.writeFile(workbook, `DigiPro_Complete_Backup_${timestamp}.xlsx`)
  }

  async exportGSTReport(gstData: any, organizationName: string): Promise<void> {
    const doc = new jsPDF()

    // Header
    doc.setFontSize(20)
    doc.setTextColor(59, 130, 246)
    doc.text("DigiPro GST Report", 20, 30)

    doc.setFontSize(12)
    doc.setTextColor(0, 0, 0)
    doc.text(organizationName, 20, 45)
    doc.text(`Period: ${this.formatDate(new Date())}`, 20, 55)

    // GST Summary
    const gstSummary = [
      ["Output Tax (Sales)", this.formatCurrency(gstData.output_tax || 0)],
      ["Input Tax (Purchases)", this.formatCurrency(gstData.input_tax || 0)],
      ["Tax Payable", this.formatCurrency(gstData.tax_payable || 0)],
      ["Returns Filed", (gstData.returns_filed || 0).toString()],
    ]

    doc.autoTable({
      startY: 70,
      head: [["Description", "Amount"]],
      body: gstSummary,
      theme: "grid",
      headStyles: { fillColor: [59, 130, 246] },
    })

    const timestamp = new Date().toISOString().split("T")[0]
    doc.save(`GST_Report_${timestamp}.pdf`)
  }
}

export const exportService = new ExportService()
